package com.example.user.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.user.entity.User;
import com.example.user.event.UserEventPublisher;
import com.example.user.event.UserCreatedEvent;
import com.example.user.event.UserCreationFailedEvent;
import com.example.user.repository.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/rest") // This means URL's start with /demo (after Application path)
public class MainController {

  @Autowired
  private UserEventPublisher eventPublisher;

  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

  UserCreatedEvent event = new UserCreatedEvent(name, email);
  if (userRepository.findByEmail(email).isPresent()) {
    System.out.println("Email already registered: " + email);
    eventPublisher.publishUserCreationFailedEvent(
        new UserCreationFailedEvent(email, "Email already registered")
    );
 // publish failure event
    return "Error: Email already registered.";
  }
  User n = new User();
  n.setName(name);
  n.setEmail(email);
  userRepository.save(n);
  eventPublisher.publishUserCreatedEvent(event); // publish success event
  return "Saved";
  }

  @GetMapping(path="/users")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}